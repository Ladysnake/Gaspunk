import net.fabricmc.loom.task.RemapJarTask

import java.time.Year

plugins {
    id "fabric-loom" version "0.2.4-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "net.minecrell.licenser" version "0.2.1"
    id "maven-publish"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = project.maven_group
archivesBaseName = project.name.toLowerCase(Locale.ROOT)
version = System.getenv("TRAVIS_TAG") ?: project.mod_version
println("Setting version: " + version)

apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/basic_project.gradle"

sourceSets {
    pathos
    api
}

processResources {
    // this will ensure that this task is redone when there"s a change
    inputs.property "version", project.version

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version , //"changelog_url": project.changelog_url,
                "curseforge_id": project.curseforge_id, "license": project.license_header,
                "mod_name": project.mod_name

    }

    // copy everything else, that"s not the fabric.mod.json
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

task apiJar(type: Jar, dependsOn: classes) {
    classifier 'api'
    from sourceSets.api.allJava
    from (sourceSets.api.output) {
        include "fabric.mod.json"
        expand "version": project.version
    }
    from (sourceSets.api.output) {
        exclude "fabric.mod.json"
    }
}

task remapApiJar(type: RemapJarTask, dependsOn: project.apiJar) {
    input = apiJar.archivePath
    output = apiJar.archivePath
    addNestedDependencies = false
}

task pathosJar(type: Jar, dependsOn: classes) {
    classifier 'pathos'
    from sourceSets.pathos.allJava
    from (sourceSets.pathos.output) {
        include "fabric.mod.json"
        expand "version": project.version
    }
    from (sourceSets.pathos.output) {
        exclude "fabric.mod.json"
    }
}

task remapPathosJar(type: RemapJarTask, dependsOn: project.pathosJar) {
    input = pathosJar.archivePath
    output = pathosJar.archivePath
    addNestedDependencies = false
}

repositories {
    jcenter()
    maven {
        name = "NerdHubMC"
        url = "https://maven.abusedmaster.xyz"
    }
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven { 
        name = "Wearables"
        url = "http://server.bbkr.space:8081/artifactory/libs-release/" 
    }
    maven { 
        name = "Sargunv"
        url = 'http://maven.sargunv.s3-website-us-west-2.amazonaws.com/' 
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${loader_version}"

    //optional dependency!
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Lazily evaluated callable returning a non-live (unlike a FileCollection) list of files
    sourceSets.api.compileClasspath += files({sourceSets.main.compileClasspath.toList()})

    pathosCompile sourceSets.api.output
    compile sourceSets.api.output
    compile sourceSets.pathos.output
    include files(remapApiJar.output)
    include files(remapPathosJar.output)

    modImplementation "com.github.Pyrofab:Cardinal-Components-API:${cca_version}"
    modImplementation "com.github.Ladysnake:Satin:${satin_version}"
    modImplementation "net.mcft.copy:Wearables:${wearables_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-particles-v1:0.1.0+143c1175"

    // Config API
    modImplementation "me.shedaniel.cloth:config-2:${project.clothconfig_version}"
    include "me.shedaniel.cloth:config-2:${project.clothconfig_version}"

    modImplementation "io.github.prospector.modmenu:ModMenu:${modmenu_version}"
    apiCompileOnly "com.google.code.findbugs:jsr305:3.0.2"
    pathosCompileOnly "com.google.code.findbugs:jsr305:3.0.2"
    apiCompileOnly "org.apiguardian:apiguardian-api:1.0.0"
    compileOnly "org.apiguardian:apiguardian-api:1.0.0"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:2.+"
}

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"

    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}
