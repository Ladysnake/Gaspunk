buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceSets {
    pathos {
        compileClasspath = main.compileClasspath
        runtimeClasspath = main.runtimeClasspath
    }
    main {
        compileClasspath += pathos.output
        runtimeClasspath += pathos.output
    }
    test {
        compileClasspath += pathos.output
        runtimeClasspath += pathos.output
    }
}

minecraft {
    version = "${project.forgeVersion}"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
//    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace '@VERSION@', modVersion
    // use findProperty instead of a direct reference to prevent gradle failure when the property does not exist
    replace '@FINGERPRINT@', project.findProperty('signSHA1')

    if (project.hasProperty('mc_username')) {
        clientRunArgs += ['--username', "${project.mc_username}"]
        if (project.hasProperty('mc_password')) {
            clientRunArgs += ['--password=', "${project.mc_password}"]
        }
    }
    if (project.hasProperty('mc_uuid')) {
        clientRunArgs += ['--uuid', "${project.mc_uuid}"]
    }
    serverRunArgs += "nogui"

    if (project.hasProperty('client_args')) {
        clientJvmArgs += "${project.client_args}"
    }
    if (project.hasProperty('server_args')) {
        serverJvmArgs += "${project.server_args}"
    }

    clientJvmArgs += "-Dlog4j.skipJansi=true"
    serverJvmArgs += "-Dlog4j.skipJansi=true"

}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    maven {
        name = "thiakil"    // Baubles
        url = "http://maven.thiakil.com"
    }
    maven {
        name 'Curseforge Maven' // Thaumcraft
        url 'https://minecraft.curseforge.com/api/maven/'
    }
}

configurations {
    contained
    contained.transitive = false
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:2.+"
    deobfCompile "com.azanor.baubles:Baubles:1.12-1.5.2"
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}:api"
    deobfCompile "thaumcraft:Thaumcraft:${mc_version}:${tc_version}"
    deobfCompile "need-to-breathe:needtobreathe:1.12:0.1.4beta"
    deobfCompile "mcjtylib:mcjtylib:1.12:2.6.7"
    deobfCompile 'com.github.Pyrofab:Ladylib:cf9b9f425f'
    contained 'com.github.Pyrofab:Ladylib:cf9b9f425f'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    from sourceSets.api.allJava
    classifier 'api'
}

javadoc {
    source sourceSets.main.allJava
    source sourceSets.api.allJava
    source sourceSets.pathos.allJava
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

build.dependsOn(apiJar)
build.dependsOn(javadocJar)

jar {
    archiveName = "${archivesBaseName}-${mc_version}-${modVersion}.jar"
    from sourceSets.api.output
    from sourceSets.main.output
    from sourceSets.pathos.output

    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }

    manifest {
        attributes([
                'ContainedDeps': configurations.contained.files.collect { it.name }.join(" "),
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp'     : System.currentTimeMillis()
        ])
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    if (canJarBeSigned()) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

boolean canJarBeSigned() {
    return project.hasProperty('keyStore')
}

// Runs this task automatically when build is ran.
build.dependsOn signJar
